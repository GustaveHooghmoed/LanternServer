// Gradle plugins
buildscript {
    repositories {
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = 'eclipse-staging'
            url = 'https://repo.eclipse.org/content/repositories/eclipse-staging'
        }
    }
    dependencies {
        classpath 'org.spongepowered:spongegradle:0.3.1-SNAPSHOT'
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    // Defined in 'buildSrc/build.gradle'
    // id "com.github.johnrengelman.shadow" version "1.2.3"
}

// Apply plugin
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.hierynomus.license'

// Apply shadow plugin
apply plugin: 'com.github.johnrengelman.shadow'

// Minimum version of Java required
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Basic project information
group = 'org.lanterpowered'
archivesBaseName = 'lanternserver'
version = '1.0.0-SNAPSHOT'

defaultTasks 'licenseFormat', 'build'

// Repositories
repositories {
    mavenCentral()
    maven {
        url 'http://repo.spongepowered.org/maven'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

sourceSets {
    java6 {
        compileClasspath += main.compileClasspath + main.output
        runtimeClasspath += main.runtimeClasspath + main.output
    }
}

compileJava6Java {
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'
}

ext.api = project('SpongeAPI')

// Disable some tasks to make the building go faster
tasks.getByPath(':SpongeAPI:javadoc').enabled = false
tasks.getByPath(':SpongeAPI:javadocJar').enabled = false
tasks.getByPath(':SpongeAPI:checkstyleMain').enabled = false
tasks.getByPath(':SpongeAPI:checkstyleTest').enabled = false
// Disable this task to avoid that we turn the dependency
// dirty when we call this on our project
tasks.getByPath(':SpongeAPI:wrapper').enabled = false

evaluationDependsOn api.path

configurations {
    fastutil
    compile {
        extendsFrom fastutil
    }
}

// Project dependencies
dependencies {
    compile api

    compile 'org.spongepowered:plugin-meta:0.1.1'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.ow2.asm:asm-all:5.0.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.mariadb.jdbc:mariadb-java-client:1.4.3'
    compile 'org.fusesource.jansi:jansi:1.12'
    compile 'org.xerial:sqlite-jdbc:3.8.11.2'
    compile 'com.zaxxer:HikariCP:2.4.6'
    compile 'com.google.guava:guava:18.0'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.flowpowered:flow-math:1.0.1'
    compile 'com.flowpowered:flow-noise:1.0.1-SNAPSHOT'
    compile 'io.netty:netty-all:4.0.21.Final'
    fastutil 'it.unimi.dsi:fastutil:7.0.12'
    compile 'ninja.leaping.configurate:configurate-core:3.1.1'
    compile 'ninja.leaping.configurate:configurate-gson:3.1.1'
    compile 'ninja.leaping.configurate:configurate-hocon:3.1.1'
    compile 'ninja.leaping.configurate:configurate-yaml:3.1.1'
    compile 'jline:jline:2.14.2'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.0'
}

ext.runFolder = 'run'

// Create the run folder
task createRunFolder {
    if (!project.file(runFolder).exists()) {
        project.file(runFolder).mkdirs()
    }
}

tasks.eclipse.dependsOn createRunFolder
tasks.idea.dependsOn createRunFolder

idea.module {
    // The java6 sourceset
    sourceDirs += file('src/java6/java')
}

// Generate application setups, currently only for intellij
idea.workspace.iws.withXml { provider ->
    // The app name
    def appName = 'Lantern Server'

    // Get the run manager node, this will contain the configuration
    def node = provider.asNode().component.find { it.@name == 'RunManager' }

    // Find the default and custom app node
    def defaultNode = node.find { it.@type == 'Application' && it.@default == 'true' }
    def customNode = node.find { it.@type == 'Application' && it.@name == appName }

    // It should always be present
    if (defaultNode == null) {
        throw new IllegalStateException('Unable to find the default application config node,' +
                ' please try to regenerate the intellij project files to resolve this issue.')
    }

    // Only create a new configuration if the old one is missing
    if (customNode == null) {
        customNode = defaultNode.clone()
        customNode.@default = 'false'
        customNode.@name = appName
        customNode.each {
            if (it.name() == 'option' && it.@name != null) {
                switch (it.@name) {
                    case 'MAIN_CLASS_NAME':   it.@value = 'org.lanternpowered.launch.Launch';           break
                    case 'VM_PARAMETERS':     it.@value = '-Dlog4j.configurationFile=log4j2_indev.xml'; break
                    case 'WORKING_DIRECTORY': it.@value = 'file://$PROJECT_DIR$/' + runFolder;          break
                }
            } else if (it.name() == 'module') {
                it.@name = project.name
            }
        }
        node.append customNode
    }
}

jar {
    classifier = 'base'
    from sourceSets.java6.output
    manifest {
        attributes(
                'Main-Class': 'org.lanternpowered.launch.VersionCheckingMain',
                'Implementation-Name': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.url,
                'Specification-Name': api.name,
                'Specification-Version': api.version,
                'Specification-Vendor': api.url
        )
    }
}

processResources {
    from 'LICENSE.txt'
}

test {
    testLogging {
        exceptionFormat = 'full' // Always print full stack trace if something goes wrong in the unit tests
    }
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.lanternpowered.gradle.transformer.Log4jCacheFileTransformer
import org.lanternpowered.gradle.transformer.DependencyClassTransformer

// A separate task to generate the fastutil jar,
// doing this separate to avoid long wait times
// Run "fastutilJar" to update the jar
task fastutilJar(type: ShadowJar) {
    // The classifier
    classifier = 'fastutil'
    // Exclude empty directories
    includeEmptyDirs = false
    // Include all the fastutil classes into the process
    from zipTree(project.configurations.fastutil.first())

    // Loop through the files and check for the files which
    // should be included in the final jar
    transform(DependencyClassTransformer) {
        pathsToCheck.include 'it/unimi/dsi/fastutil/**'
        filesToInclude.include 'it/unimi/dsi/fastutil/bytes/Byte2CharOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/objects/Object2CharOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/objects/Object2IntOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/objects/Object2IntMaps.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/objects/Object2ShortOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/chars/Char2ByteOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/chars/Char2ObjectOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/ints/Int2ObjectOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/shorts/Short2ObjectOpenHashMap.class'
        filesToInclude.include 'it/unimi/dsi/fastutil/shorts/Short2ShortOpenHashMap.class'
    }
}

// Sadly enough does the "overwrite: true" parameter not work,
// so this task will delete the jar before running fastutilJar
task deleteFastutilJar(type: Delete) {
    delete project.fastutilJar.archivePath
}
fastutilJar.dependsOn deleteFastutilJar

shadowJar {
    // The fastutil jar should be generated if missing,
    // regeneration after changes require manual triggering
    if (!project.fastutilJar.archivePath.exists()) {
        dependsOn fastutilJar
    }

    // Empty classifier, this is the final jar
    classifier = ''
    // Exclude empty directories
    includeEmptyDirs = false
    // Include the java6 files
    from sourceSets.java6.output
    // Exclude source files
    exclude '**/*.java'
    exclude 'Version.java.template'
    exclude 'log4j2_indev.xml'

    // Make sure that the jar is generated
    afterEvaluate {
        // Include the fastutil classes
        from zipTree(project.fastutilJar.archivePath)
    }

    dependencies {
        // SpongeAPI
        include project(api.path)
        include dependency('org.spongepowered:event-gen-core')
        include dependency('org.spongepowered:plugin-meta')

        include dependency('com.google.guava:guava')
        include dependency('com.google.code.findbugs:jsr305')
        include dependency('org.apache.commons:commons-lang3')
        include dependency('io.netty:netty-all')

        // Bytecode
        include dependency('org.ow2.asm:asm-all')

        // Logging and Console
        include dependency('org.slf4j:slf4j-api')
        include dependency('org.apache.logging.log4j:log4j-slf4j-impl')
        include dependency('org.apache.logging.log4j:log4j-core')
        include dependency('org.apache.logging.log4j:log4j-api')
        include dependency('org.fusesource.jansi:jansi')
        include dependency('jline:jline')

        // Guice
        include dependency('com.google.inject:guice')
        include dependency('javax.inject:javax.inject')
        include dependency('aopalliance:aopalliance')

        // Math and Noise
        include dependency('com.flowpowered:flow-math')
        include dependency('com.flowpowered:flow-noise')

        // Configuration
        include dependency('ninja.leaping.configurate:configurate-core')
        include dependency('ninja.leaping.configurate:configurate-hocon')
        include dependency('ninja.leaping.configurate:configurate-gson')
        include dependency('ninja.leaping.configurate:configurate-yaml')
        include dependency('org.yaml:snakeyaml')
        include dependency('com.google.code.gson:gson')
        include dependency('com.typesafe:config')

        // Database
        include dependency('com.zaxxer:HikariCP')
        include dependency('org.mariadb.jdbc:mariadb-java-client')
        include dependency('com.h2database:h2')
        include dependency('org.xerial:sqlite-jdbc')

        mergeServiceFiles()

        // Merge the Log4j2Plugins.dat file properly
        transform(Log4jCacheFileTransformer)
    }

    exclude 'LICENSE', 'NOTICE'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from api.sourceSets.main.allSource
    from sourceSets.java6.allSource
    from sourceSets.main.allSource
}

// Run shadowJar and sourceJar on build
assemble.dependsOn shadowJar
assemble.dependsOn sourceJar

// The fastutil jar should be generated if missing
if (!project.fastutilJar.archivePath.exists()) {
    assemble.dependsOn fastutilJar
}

apply from: file('gradle/license.gradle')

// Gradle version used for generating the Gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}
